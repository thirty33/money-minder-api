service: money-minder-api

useDotenv: true


provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}
  architecture: x86_64
  # apiGateway:
  #   apiKeys:
  #     - money-minder-primary-key
  # environment:
  #   BUCKET: !GetAtt S3Bucket.Arn
  #   SECRET_EGG: ${ssm:/SECRET_EGG}
  environment:
    # user_pool_id: { Ref: UserPool }
    # client_id: { Ref: UserClient }
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: !GetAtt Transaction.Arn
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"
  
plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb
  - serverless-ignore
  - serverless-python-requirements
  - serverless-offline
package:
  individually: true
  patterns:
    - "!*/**"
    - "!**"
  exclude:
    - .env/**

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
  pythonRequirements:
    dockerizePip: false
    # dockerImage: public.ecr.aws/sam/build-python3.8:latest-arm64
    # dockerRunCmdExtraArgs: [ '--platform', 'linux/arm64/v8' ]
    # slim: true
    layer:
      name: FastAPI-Lambda-Function
      description: FastAPI-Lambda-Function API Layer
      compatibleRuntimes:
        - python3.8
    # useDownloadCache: true
    # useStaticCache: true


resources:
  Resources:
    Transaction:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:table_transaction_name}
        AttributeDefinitions:
          - AttributeName: Title
            AttributeType: S
          - AttributeName: Uid
            AttributeType: S
        KeySchema:
          - AttributeName: Title
            KeyType: HASH
          - AttributeName: Uid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    User:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:user_transaction_name}
        AttributeDefinitions:
          - AttributeName: Email
            AttributeType: S
          - AttributeName: Uid
            AttributeType: S
        KeySchema:
          - AttributeName: Email
            KeyType: HASH
          - AttributeName: Uid
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

functions:
  # custom-authorizer:
  #   handler: lambdas/custom-authorizer/handler.authorize
  #   package:
  #     patterns:
  #       - "lambdas/custom-authorizer/**"
  app:
    handler: lambdas/transaction/handler-transaction.handler
    runtime: python3.8
    environment:
      STAGE: ${self:provider.stage}
    layers:
      - { Ref: PythonRequirementsLambdaLayer }
    package:
      patterns:
        - "lambdas/transaction/**"
    events:
      - http:
          method: any
          path: /{proxy+}
          cors: true
          # authorizer:
          #   name: PrivateAuthorizer
          #   type: COGNITO_USER_POOLS
          #   arn:
          #     Fn::GetAtt:
          #       - UserPool
          #       - Arn
          #   claims:
          #     - email
  


